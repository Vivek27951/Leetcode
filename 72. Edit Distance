class Solution {
public:
    
    // vector<vector<int>>dp(501,vector<int>(501,-1));
    
    int helper(string w1,string w2,int i1,int i2,vector<vector<int>>& dp){
        if(i1==w1.size())
            return w2.size()-i2;
        if(i2==w2.size())
            return w1.size()-i1;
        
        if(dp[i1][i2]!=-1) return dp[i1][i2];
        
        if(w1[i1]==w2[i2]){
            dp[i1][i2] = min(helper(w1,w2,i1+1,i2+1,dp),min(1+helper(w1,w2,i1+1,i2,dp),1+helper(w1,w2,i1,i2+1,dp)));
        }
        else
            dp[i1][i2] = min(1+helper(w1,w2,i1+1,i2+1,dp),min(1+helper(w1,w2,i1+1,i2,dp),1+helper(w1,w2,i1,i2+1,dp)));
        return dp[i1][i2];
    }
    
    int minDistance(string w1, string w2) {
        int n = w1.size();
        int m = w2.size();
        int dp[n+1][m+1];
        
        for(int i=0;i<=n;i++) dp[i][0]=i;
        for(int i=0;i<=m;i++) dp[0][i]=i;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(w1[i-1]==w2[j-1]){
                    dp[i][j] = min(1+dp[i-1][j],min(1+dp[i][j-1],dp[i-1][j-1]));
                }
                else
                    dp[i][j] = min(1+dp[i-1][j],min(1+dp[i][j-1],1+dp[i-1][j-1]));
            }
        }
        return dp[n][m];
    }
};
