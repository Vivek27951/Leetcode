Given an integer array arr and an integer k, modify the array by repeating it k times.

For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.

As the answer can be very large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [1,2], k = 3
Output: 9
Example 2:

Input: arr = [1,-2,1], k = 5
Output: 2
Example 3:

Input: arr = [-1,-2], k = 7
Output: 0
 

Constraints:

1 <= arr.length <= 105
1 <= k <= 105
-104 <= arr[i] <= 104





class Solution {
public:
    long long helper(vector<int>& arr,int t)
    {
        int n = arr.size();
        int i = 0;
        long long current_sum = 0;
        long long max_sum = 0;
        while(i<t*n)
        {
            current_sum+=arr[i%n];
            if(current_sum>max_sum)
            {
                max_sum=current_sum;
            }
            if(current_sum<0)
                current_sum = 0;
            i++;
        }
        return max_sum;
    }
    int kConcatenationMaxSum(vector<int>& arr, int k) {
        int m = 1000000007;
        if(k==1)
        {
            return helper(arr,1)%m;
        }
        int n = arr.size();
        long long sum = 0;
        for(int i=0;i<n;i++)
            sum=(sum+arr[i]);
        if(sum>0)
        {
            return (((sum*(k-2))%m)+(helper(arr,2)%m))%m;
        }
        else
            return helper(arr,2)%m;
        
    }
};
