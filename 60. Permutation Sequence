class Solution {
public:
    
    void f(vector<string>& v,string s,int index){
        if(index==s.size()){
            v.push_back(s);
            return;
        }
        for(int i=index;i<s.size();i++){
            swap(s[index],s[i]);
            f(v,s,index+1);
            swap(s[index],s[i]);
        }
    }
    
    string getPermutation(int n, int k) {
        string s = "";
        for(int i=1;i<=n;i++){
            s+=to_string(i);
        }
        vector<string>v;
        string t= "";
        f(v,s,0);
        sort(v.begin(),v.end());
        return v[k-1];
    }
};




class Solution {
public:
    string getPermutation(int n, int k) {
        vector<int>v;
        int p = 1;
        for(int i=1;i<n;i++){
            v.push_back(i);
            p*=i;
        }
        k--;
        v.push_back(n);
        string ans = "";
        while(true){
            int index = k/p;
            k=k%p;
            ans+=to_string(v[index]);
            v.erase(v.begin()+index);
            if(v.size()==0)
                return ans;
            p = p/v.size();
        }
        return ans;
    }
};
